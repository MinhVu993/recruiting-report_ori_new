'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var QRCode = require('qrcode');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var QRCode__default = /*#__PURE__*/_interopDefaultLegacy(QRCode);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

var LEVELS = [
    'low',
    'medium',
    'quartile',
    'high',
    'L',
    'M',
    'Q',
    'H',
];
// eslint-disable-next-line @typescript-eslint/no-magic-numbers
var MASK_PATTERNS = [0, 1, 2, 3, 4, 5, 6, 7];
var MODES = ['alphanumeric', 'numeric', 'kanji', 'byte'];
var TYPES = ['image/png', 'image/jpeg', 'image/webp'];
var MAX_QR_VERSION = 40;
var index = {
    props: {
        version: {
            type: Number,
            validator: function (version) {
                return version === Number.parseInt(String(version), 10) &&
                    version >= 1 &&
                    version <= MAX_QR_VERSION;
            },
        },
        errorCorrectionLevel: {
            type: String,
            validator: function (level) { return LEVELS.includes(level); },
        },
        maskPattern: {
            type: Number,
            validator: function (maskPattern) {
                return MASK_PATTERNS.includes(maskPattern);
            },
        },
        toSJISFunc: Function,
        margin: Number,
        scale: Number,
        width: Number,
        color: {
            type: Object,
            validator: function (color) {
                return ['dark', 'light'].every(function (c) {
                    return ['string', 'undefined'].includes(typeof color[c]);
                });
            },
        },
        type: {
            type: String,
            validator: function (type) { return TYPES.includes(type); },
        },
        quality: {
            type: Number,
            validator: function (quality) {
                return quality === Number.parseFloat(String(quality)) &&
                    quality >= 0 &&
                    quality <= 1;
            },
        },
        value: {
            type: [String, Array],
            required: true,
            validator: function (value) {
                if (typeof value === 'string') {
                    return true;
                }
                return value.every(function (_a) {
                    var data = _a.data, mode = _a.mode;
                    return typeof data === 'string' && (mode == null || MODES.includes(mode));
                });
            },
        },
    },
    data: function () {
        return {
            dataUrl: '',
        };
    },
    watch: {
        $props: {
            deep: true,
            immediate: true,
            handler: 'toDataURL',
        },
    },
    methods: {
        toDataURL: function () {
            var _this = this;
            var _a = this.$props, quality = _a.quality, props = __rest(_a, ["quality"]);
            return QRCode__default['default'].toDataURL(this.value, Object.assign(props, quality == null || {
                renderOptions: {
                    quality: quality,
                },
            }))
                .then(function (dataUrl) { return (_this.dataUrl = dataUrl); })
                .catch(function (err) { return _this.$emit('error', err); });
        },
    },
    render: function () {
        return this.$createElement('img', {
            domProps: __assign(__assign({}, this.$attrs), { src: this.dataUrl }),
        });
    },
};

exports.LEVELS = LEVELS;
exports.MASK_PATTERNS = MASK_PATTERNS;
exports.MODES = MODES;
exports.TYPES = TYPES;
exports.default = index;
